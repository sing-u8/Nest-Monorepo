name: Deploy to Production

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/auth-service

jobs:
  # Build and push Docker image
  build-and-push:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Output image
        id: image
        run: |
          echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}" >> $GITHUB_OUTPUT

  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment:
      name: staging
      url: https://auth-staging.yourapp.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure kubectl
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > ~/.kube/config
          chmod 600 ~/.kube/config

      - name: Deploy to staging cluster
        run: |
          # Update image in deployment
          sed -i "s|image: auth-service:latest|image: ${{ needs.build-and-push.outputs.image }}|g" k8s/deployment.yaml
          
          # Apply Kubernetes manifests
          kubectl apply -f k8s/namespace.yaml
          kubectl apply -f k8s/configmap.yaml
          kubectl apply -f k8s/secret.yaml
          kubectl apply -f k8s/deployment.yaml
          kubectl apply -f k8s/service.yaml
          
          # Wait for deployment to complete
          kubectl rollout status deployment/auth-service -n auth-service --timeout=300s

      - name: Run health check
        run: |
          # Wait for service to be ready
          sleep 30
          
          # Health check
          kubectl exec -n auth-service deployment/auth-service -- curl -f http://localhost:3000/health
          
          echo "✅ Staging deployment successful!"

      - name: Run smoke tests
        run: |
          # Get service endpoint
          ENDPOINT=$(kubectl get service auth-service-external -n auth-service -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          
          # Basic smoke tests
          curl -f "http://$ENDPOINT/health" || exit 1
          curl -f "http://$ENDPOINT/api/v1/auth/oauth/config" || exit 1
          
          echo "✅ Smoke tests passed!"

  # Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-push, deploy-staging]
    if: (github.ref == 'refs/heads/main' && github.event_name == 'push') || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment:
      name: production
      url: https://auth.yourapp.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure kubectl
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > ~/.kube/config
          chmod 600 ~/.kube/config

      - name: Pre-deployment checks
        run: |
          # Verify image exists and is scannable
          docker manifest inspect ${{ needs.build-and-push.outputs.image }}
          
          # Validate Kubernetes manifests
          kubectl apply --dry-run=client -f k8s/
          
          echo "✅ Pre-deployment checks passed"

      - name: Blue-Green Deployment
        run: |
          # Update image in deployment
          sed -i "s|image: auth-service:latest|image: ${{ needs.build-and-push.outputs.image }}|g" k8s/deployment.yaml
          
          # Create new deployment with different name
          sed -i "s|name: auth-service|name: auth-service-green|g" k8s/deployment.yaml
          sed -i "s|app: auth-service|app: auth-service-green|g" k8s/deployment.yaml
          
          # Deploy green version
          kubectl apply -f k8s/namespace.yaml
          kubectl apply -f k8s/configmap.yaml
          kubectl apply -f k8s/secret.yaml
          kubectl apply -f k8s/deployment.yaml
          
          # Wait for green deployment to be ready
          kubectl rollout status deployment/auth-service-green -n auth-service --timeout=600s

      - name: Health check green deployment
        run: |
          # Test green deployment health
          kubectl exec -n auth-service deployment/auth-service-green -- curl -f http://localhost:3000/health
          kubectl exec -n auth-service deployment/auth-service-green -- curl -f http://localhost:3000/health/ready
          
          echo "✅ Green deployment health check passed"

      - name: Switch traffic to green
        run: |
          # Update service to point to green deployment
          kubectl patch service auth-service -n auth-service -p '{"spec":{"selector":{"app":"auth-service-green"}}}'
          kubectl patch service auth-service-external -n auth-service -p '{"spec":{"selector":{"app":"auth-service-green"}}}'
          
          echo "✅ Traffic switched to green deployment"

      - name: Production smoke tests
        run: |
          # Get production endpoint
          ENDPOINT=$(kubectl get service auth-service-external -n auth-service -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          
          # Wait for DNS propagation
          sleep 60
          
          # Production smoke tests
          curl -f "https://$ENDPOINT/health" || exit 1
          curl -f "https://$ENDPOINT/api/v1/auth/oauth/config" || exit 1
          
          # Test authentication flow
          REGISTER_RESPONSE=$(curl -s -X POST "https://$ENDPOINT/api/v1/auth/register" \
            -H "Content-Type: application/json" \
            -d '{"email":"test@example.com","password":"TestPass123!","name":"Test User"}')
          
          if echo "$REGISTER_RESPONSE" | grep -q "success"; then
            echo "✅ Authentication flow test passed"
          else
            echo "❌ Authentication flow test failed"
            exit 1
          fi

      - name: Cleanup old deployment
        run: |
          # Remove blue deployment after successful green deployment
          kubectl delete deployment auth-service -n auth-service --ignore-not-found=true
          
          # Rename green to blue for next deployment
          kubectl patch deployment auth-service-green -n auth-service -p '{"metadata":{"name":"auth-service"}}'
          kubectl patch deployment auth-service-green -n auth-service -p '{"spec":{"selector":{"matchLabels":{"app":"auth-service"}}}}'
          kubectl patch deployment auth-service-green -n auth-service -p '{"spec":{"template":{"metadata":{"labels":{"app":"auth-service"}}}}}'
          
          echo "✅ Cleanup completed"

  # Rollback deployment
  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    if: failure()
    needs: [deploy-production]
    environment:
      name: production
    steps:
      - name: Configure kubectl
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > ~/.kube/config
          chmod 600 ~/.kube/config

      - name: Rollback to previous version
        run: |
          kubectl rollout undo deployment/auth-service -n auth-service
          kubectl rollout status deployment/auth-service -n auth-service --timeout=300s
          
          echo "🔄 Rollback completed"

      - name: Verify rollback
        run: |
          kubectl exec -n auth-service deployment/auth-service -- curl -f http://localhost:3000/health
          echo "✅ Rollback verification passed"

  # Post-deployment notifications
  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    steps:
      - name: Notify success
        if: ${{ needs.deploy-production.result == 'success' }}
        run: |
          echo "🎉 Production deployment successful!"
          echo "🚀 Version: ${{ github.sha }}"
          echo "🌐 URL: https://auth.yourapp.com"

      - name: Notify failure
        if: ${{ needs.deploy-production.result != 'success' }}
        run: |
          echo "❌ Production deployment failed"
          echo "🔄 Automatic rollback initiated"